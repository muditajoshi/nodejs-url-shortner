const request = require("supertest");
const app = require("../server");
const mongoose = require("mongoose");
const redis = require("redis-mock");
const { nanoid } = require("nanoid");
const URL = require("../models/URL"); // Import your URL model

jest.mock("redis", () => ({
  createClient: jest.fn(() => ({
    on: jest.fn(),
    once: jest.fn(),
    connect: jest.fn(),
    get: jest.fn(),
    set: jest.fn(),
    del: jest.fn(),
    quit: jest.fn(),
  })),
}));



beforeAll(async () => {
  await mongoose.connect("mongodb://localhost:27017/testdb", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
});

afterAll(async () => {
  await mongoose.connection.close();
});

describe("URL Shortener API", () => {
  let shortUrl;
  
  test("Should create a short URL", async () => {
    const response = await request(app)
      .post("/api/shorten")
      .send({ longUrl: "https://example.com" });
    
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty("shortUrl");
    shortUrl = response.body.shortUrl.split("/").pop();
  });
  
  test("Should retrieve the long URL", async () => {
    const response = await request(app).get(`/${shortUrl}`);
    expect(response.status).toBe(302);
    expect(response.header.location).toBe("https://example.com");
  });
  
  test("Should return 404 for an invalid short URL", async () => {
    const response = await request(app).get("/invalidShortUrl");
    expect(response.status).toBe(404);
  });
  
  test("Should enforce rate limiting", async () => {
    for (let i = 0; i < 20; i++) {
      await request(app).post("/api/shorten").send({ longUrl: "https://test.com" });
    }
    const response = await request(app).post("/api/shorten").send({ longUrl: "https://test.com" });
    expect(response.status).toBe(429);
    expect(response.body.error).toBe("Too many requests, please try again later.");
  });
});
